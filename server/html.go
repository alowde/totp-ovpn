package server

import (
	"html/template"
	"net/http"
)

var head = `
<head>
	<style>
	h1 {
		margin-bottom: 15px;
		font-family: inherit;
		font-weight: 500;
		line-height: 1.2;
		font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji"
    }
	.lightbox {
		border-style: solid;
		border-width: 1px;
		border-color: rgba(0,0,0,0.25);
		margin: 0 auto;
		width: 600px;
		box-shadow: 0 14px 28px rgba(0,0,0,0.25), 0 10px 10px rgba(0,0,0,0.22);
		text-align: center;
		padding: 10px;
        font-family: -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,"Helvetica Neue",Arial,sans-serif,"Apple Color Emoji","Segoe UI Emoji","Segoe UI Symbol","Noto Color Emoji";
	}
	.inset {
		display: inline-block; text-align: left;
	}
	form {
		display: table;
	}
	.form-item {
		display: table-row;
		margin: 5px
	}
	.form-label {
		display: table-cell;
	}
	.form-input {
		display: table-cell;
		margin-left: 5px;
	}
	</style>
</head>
<body>
	<div class="lightbox">
		<h1>{{.Title}}</h1>
		<div class="inset">`

var tail = `
		</div>
	</div>
</body>
`

var qrContent = `
<img src="/qr?user={{.User}}" /><br>
		Text here centered`

var csrUploadContent = `
<p>To enroll a new user you'll need the CSR generated by totp-ovpn on your workstation and a password supplied by your system administrator.<p>

<form action="upload-csr" method="post" enctype="multipart/form-data">
    <p class="form-item"><label class="form-label">CSR:</label><input type="file" name="fileToUpload" id="fileToUpload" class="form-input"></p>
    <p class="form-item"><label class="form-label">Password:</label><input type="password" name="password" class="form-input"></p>
	<p class="form-item">&nbsp;</p>
	<p class="form-item"><input type="submit" value="Submit" name="submit" class="form-input"></p>
</form>
`

var authErrorContent = `
	Something went wrong :(.
`

func renderPageQR(w http.ResponseWriter, user string) error {

	params := struct {
		Title string
		User  string
	}{"Enroll a New User", user}

	t := template.New("renderPageQR")
	t, _ = t.Parse(head + qrContent + tail)
	return t.Execute(w, params)

}

func renderPageEnrollUser(w http.ResponseWriter) error {

	params := struct {
		Title string
	}{"Enroll a New User"}

	t := template.New("renderPageEnrollUser")
	t, _ = t.Parse(head + csrUploadContent + tail)
	return t.Execute(w, params)
}

func renderPageAuthError(w http.ResponseWriter, message string) error {
	params := struct {
		Title string
	}{"Authentication Error"}

	t := template.New("renderPageAuthError")
	t, _ = t.Parse(head + authErrorContent + tail)
	return t.Execute(w, params)
}